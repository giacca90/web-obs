// ⚙️ Archivo autogenerado, no editar manualmente
export const AUDIO_PROCESSOR = "\"use strict\";\nclass AudioProcessor extends AudioWorkletProcessor {\n    constructor() {\n        super(...arguments);\n        this.initialized = false;\n    }\n    // parámetros accesibles desde el main thread (opcional)\n    static get parameterDescriptors() {\n        return [];\n    }\n    process(inputs, outputs, parameters) {\n        // ⚡ enviar mensaje de arranque la primera vez que llegue audio\n        if (this.initialized) {\n            this.port.postMessage({ event: 'pre-worker-started' });\n        }\n        else {\n            this.port.postMessage({ event: 'worker-started' });\n            this.initialized = true;\n        }\n        const input = inputs[0];\n        if (!input || input.length === 0) {\n            // No hay datos de audio, indicar que no seguimos procesando\n            return false;\n        }\n        const channelData = input[0]; // canal 0\n        let sum = 0;\n        for (const sample of channelData) {\n            sum += sample ** 2;\n        }\n        const rms = Math.sqrt(sum / channelData.length);\n        // enviar RMS al hilo principal\n        this.port.postMessage({ rms });\n        // seguimos procesando mientras haya datos\n        return channelData.length > 0;\n    }\n}\nregisterProcessor('audio-processor', AudioProcessor);\n";
